{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Team Documentation This site contains guidelines, processes, and resources for our team. Quick Links Team Guidelines About Our Team Git Branching Strategy Static Code Analysis Unit Testing End-to-End Testing GitHub Actions Workflow","title":"Home"},{"location":"#welcome-to-team-documentation","text":"This site contains guidelines, processes, and resources for our team.","title":"Welcome to Team Documentation"},{"location":"#quick-links","text":"Team Guidelines About Our Team Git Branching Strategy Static Code Analysis Unit Testing End-to-End Testing GitHub Actions Workflow","title":"Quick Links"},{"location":"about/","text":"About Our Team We are coolios mcmuffin Team Members -Luana (Rage Gamer) -Xander (Gage Ramer) -Mikkel (Pooper)","title":"About"},{"location":"about/#about-our-team","text":"We are coolios mcmuffin","title":"About Our Team"},{"location":"about/#team-members","text":"-Luana (Rage Gamer) -Xander (Gage Ramer) -Mikkel (Pooper)","title":"Team Members"},{"location":"e2e-testing/","text":"End-to-End Testing We implemented E2E tests using [Framework Name]. The following flows were tested: [Flow 1] [Flow 2] Details of the test implementation are provided here.","title":"E2e-testing"},{"location":"e2e-testing/#end-to-end-testing","text":"We implemented E2E tests using [Framework Name]. The following flows were tested: [Flow 1] [Flow 2] Details of the test implementation are provided here.","title":"End-to-End Testing"},{"location":"git-strategy/","text":"Git Branching Strategy We use the following branching strategy for this project: Main branch : Contains production-ready code. Feature branches : Used for developing new features. Hotfix branches : For urgent fixes to the main branch. All changes are merged into the main branch via pull requests.","title":"Git-stragegy"},{"location":"git-strategy/#git-branching-strategy","text":"We use the following branching strategy for this project: Main branch : Contains production-ready code. Feature branches : Used for developing new features. Hotfix branches : For urgent fixes to the main branch. All changes are merged into the main branch via pull requests.","title":"Git Branching Strategy"},{"location":"github-actions/","text":"GitHub Actions Workflow Our GitHub Actions workflow automates the following tasks: Running unit tests Running E2E tests Deploying to GitHub Pages The workflow file is located in .github/workflows/ci.yml .","title":"GitHub-actions"},{"location":"github-actions/#github-actions-workflow","text":"Our GitHub Actions workflow automates the following tasks: Running unit tests Running E2E tests Deploying to GitHub Pages The workflow file is located in .github/workflows/ci.yml .","title":"GitHub Actions Workflow"},{"location":"guidelines/","text":"Team Guidelines Communication - Check email at least twice daily - Respond to Slack messages within 4 seconds - Attend daily standup meetings Development Workflow 1. Create a branch for each feature 2. Submit pull request for review 3. Ensure test pass before merging","title":"Guidelines"},{"location":"guidelines/#team-guidelines","text":"","title":"Team Guidelines"},{"location":"guidelines/#communication","text":"- Check email at least twice daily - Respond to Slack messages within 4 seconds - Attend daily standup meetings","title":"Communication"},{"location":"guidelines/#development-workflow","text":"1. Create a branch for each feature 2. Submit pull request for review 3. Ensure test pass before merging","title":"Development Workflow"},{"location":"refactoring/","text":"Refactoring We have been refactoring like crazy!! Examples : Example test cases: 1. [Test Case 1] 2. [Test Case 2]","title":"Refactoring"},{"location":"refactoring/#refactoring","text":"We have been refactoring like crazy!! Examples : Example test cases: 1. [Test Case 1] 2. [Test Case 2]","title":"Refactoring"},{"location":"static-code-analysis/","text":"Static Code Analysis We used ESLint for static code analysis. Our setup for rules and ignored files and directories were as following: import js from \"@eslint/js\"; import pluginVue from \"eslint-plugin-vue\"; import globals from \"globals\"; import pluginVitest from \"@vitest/eslint-plugin\"; import pluginCypress from \"eslint-plugin-cypress/flat\"; export default [ { name: \"app/files-to-lint\", files: [\"**/*.{js,mjs,jsx,vue}\"], }, { name: \"app/files-to-ignore\", ignores: [ \"**/dist/**\", // Build output \"**/dist-ssr/**\", // Server-side rendered build output \"**/coverage/**\", // Test coverage reports \"**/node_modules/**\", // Dependencies \"**/build/**\", // Build folder \"**/*.min.js\", // Minified JavaScript files \"**/.cache/**\", // Cache files \"**/temp/**\", // Temporary files \"**/.env\", // Environment variables \"**/.env.*\", // Environment variables with extensions \"**/*.log\", // Log files \"**/.vscode/**\", // VSCode settings \"**/.idea/**\", // IntelliJ IDEA settings \"**/cypress/videos/**\", // Cypress videos \"**/cypress/screenshots/**\", // Cypress screenshots \"**/cypress/fixtures/**\", // Cypress fixtures \"**/cypress/support/**\", // Cypress support files \"**/test-output/**\", // Test output \"**/reports/**\", // Reports \"**/*.generated.*\", // Generated files \"**/*.bak\", // Backup files \"**/*.config.*\", // Configuration files ], }, { languageOptions: { globals: { ...globals.browser, }, }, }, js.configs.recommended, ...pluginVue.configs[\"flat/essential\"], { ...pluginVitest.configs.recommended, files: [\"src/**/__tests__/*\"], }, { ...pluginCypress.configs.recommended, files: [\"cypress/e2e/**/*.{cy,spec}.{js,ts,jsx,tsx}\", \"cypress/support/**/*.{js,ts,jsx,tsx}\"], }, { rules: { \"comma-dangle\": [\"error\", \"always-multiline\"], eqeqeq: [\"error\", \"always\"], indent: [\"error\", 2], \"no-eval\": [\"error\"], \"no-trailing-spaces\": [\"error\"], \"no-unused-vars\": [\"error\"], \"no-var\": [\"error\"], \"prefer-const\": [\"error\"], \"no-console\": [\"warn\", { allow: [\"warn\", \"error\"] }], complexity: [\"warn\", { max: 20 }], \"no-param-reassign\": [\"error\"], quotes: [\"error\", \"double\"], semi: [\"error\", \"always\"], \"vue/component-name-in-template-casing\": [\"error\", \"PascalCase\"], \"vue/no-unused-components\": [\"error\"], }, }, ]; Refactoring details are documented here. LET SOOOOOOGOOOOO","title":"Static-code-analysis"},{"location":"static-code-analysis/#static-code-analysis","text":"We used ESLint for static code analysis. Our setup for rules and ignored files and directories were as following: import js from \"@eslint/js\"; import pluginVue from \"eslint-plugin-vue\"; import globals from \"globals\"; import pluginVitest from \"@vitest/eslint-plugin\"; import pluginCypress from \"eslint-plugin-cypress/flat\"; export default [ { name: \"app/files-to-lint\", files: [\"**/*.{js,mjs,jsx,vue}\"], }, { name: \"app/files-to-ignore\", ignores: [ \"**/dist/**\", // Build output \"**/dist-ssr/**\", // Server-side rendered build output \"**/coverage/**\", // Test coverage reports \"**/node_modules/**\", // Dependencies \"**/build/**\", // Build folder \"**/*.min.js\", // Minified JavaScript files \"**/.cache/**\", // Cache files \"**/temp/**\", // Temporary files \"**/.env\", // Environment variables \"**/.env.*\", // Environment variables with extensions \"**/*.log\", // Log files \"**/.vscode/**\", // VSCode settings \"**/.idea/**\", // IntelliJ IDEA settings \"**/cypress/videos/**\", // Cypress videos \"**/cypress/screenshots/**\", // Cypress screenshots \"**/cypress/fixtures/**\", // Cypress fixtures \"**/cypress/support/**\", // Cypress support files \"**/test-output/**\", // Test output \"**/reports/**\", // Reports \"**/*.generated.*\", // Generated files \"**/*.bak\", // Backup files \"**/*.config.*\", // Configuration files ], }, { languageOptions: { globals: { ...globals.browser, }, }, }, js.configs.recommended, ...pluginVue.configs[\"flat/essential\"], { ...pluginVitest.configs.recommended, files: [\"src/**/__tests__/*\"], }, { ...pluginCypress.configs.recommended, files: [\"cypress/e2e/**/*.{cy,spec}.{js,ts,jsx,tsx}\", \"cypress/support/**/*.{js,ts,jsx,tsx}\"], }, { rules: { \"comma-dangle\": [\"error\", \"always-multiline\"], eqeqeq: [\"error\", \"always\"], indent: [\"error\", 2], \"no-eval\": [\"error\"], \"no-trailing-spaces\": [\"error\"], \"no-unused-vars\": [\"error\"], \"no-var\": [\"error\"], \"prefer-const\": [\"error\"], \"no-console\": [\"warn\", { allow: [\"warn\", \"error\"] }], complexity: [\"warn\", { max: 20 }], \"no-param-reassign\": [\"error\"], quotes: [\"error\", \"double\"], semi: [\"error\", \"always\"], \"vue/component-name-in-template-casing\": [\"error\", \"PascalCase\"], \"vue/no-unused-components\": [\"error\"], }, }, ]; Refactoring details are documented here. LET SOOOOOOGOOOOO","title":"Static Code Analysis"},{"location":"unit-testing/","text":"Unit Testing We implemented unit tests using [Framework Name]. Below are the details: Number of tests : 5 Coverage : [Coverage Percentage] Example test cases: 1. [Test Case 1] 2. [Test Case 2]","title":"Unit-testing"},{"location":"unit-testing/#unit-testing","text":"We implemented unit tests using [Framework Name]. Below are the details: Number of tests : 5 Coverage : [Coverage Percentage] Example test cases: 1. [Test Case 1] 2. [Test Case 2]","title":"Unit Testing"}]}