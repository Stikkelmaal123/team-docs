{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\"Velkommen til versionstyingsafleveringen\" Dette er en pages-site omkring versionstyring af dette site: https://github.com/Stikkelmaal123/team-docs Quick Links Git Branching Strategy Static Code Analysis Unit Testing End-to-End Testing GitHub Actions Workflow","title":"Home"},{"location":"#velkommen-til-versionstyingsafleveringen","text":"Dette er en pages-site omkring versionstyring af dette site: https://github.com/Stikkelmaal123/team-docs","title":"\"Velkommen til versionstyingsafleveringen\""},{"location":"#quick-links","text":"Git Branching Strategy Static Code Analysis Unit Testing End-to-End Testing GitHub Actions Workflow","title":"Quick Links"},{"location":"e2e-testing/","text":"End-to-End Testing Der er blevet udf\u00f8rt 2 End-to-end tests p\u00e5 projektet via frameworket cypress. Den f\u00f8rste test skulle teste flowet tilh\u00f8rende oprettelse af et event, og test nummer 2 testede sletning af events 1 flow describe(\"Create Event\", () => { beforeEach(() => { cy.visit(\"/\"); }); it(\"should complete the full create event flow\", () => { // Login with valid credentials cy.get('.login-page__input[type=\"email\"]').type(\"john@doe.com\"); cy.get('.login-page__input[type=\"password\"]').type(\"123456\"); cy.get('.login-page__button[type=\"submit\"]').click(); cy.url().should(\"not.include\", \"/login\"); cy.get(\".home-view\").should(\"be.visible\"); // Navigate to the calendar page cy.get('.sidenav__link[href=\"/calendar\"]').click(); cy.url().should(\"include\", \"/calendar\"); cy.get(\".calendar-view\").should(\"be.visible\"); // Select a date in the calendar cy.get(\".calendar__grid\").should(\"be.visible\"); cy.get(\".calendar__cell\").contains(\"15\").click(); cy.get(\".event-list\").should(\"be.visible\"); cy.get(\".event-list__title\").should(\"contain\", \"Events for Thu May 15 2025\"); // Open the CreateEvent modal via the add button cy.get(\".event-list__add-btn\").click(); cy.get(\".event-modal\").should(\"be.visible\"); // Fill in the CreateEvent form and submit cy.get(\".date-input\").clear().type(\"2025-05-15\"); // Fixed dropdown interactions - target by label and use correct Danish text cy.contains(\"label\", \"Skema\").parent().find(\".dropdown__header\").click(); cy.get(\".dropdown__search-input\").type(\"Ryd\"); cy.get(\".dropdown__item\").contains(\"Ryd\").click(); cy.contains(\"label\", \"Virksomhed\").parent().find(\".dropdown__header\").click(); cy.get(\".dropdown__search-input\").type(\"Boston\"); cy.get(\".dropdown__item\").contains(\"Boston\").click(); cy.contains(\"label\", \"Lokation\").parent().find(\".dropdown__header\").click(); cy.get(\".dropdown__search-input\").type(\"veggie\"); cy.get(\".dropdown__item\").contains(\"Veggie\").click(); cy.contains(\"label\", \"Bruger\").parent().find(\".dropdown__header\").click(); cy.get(\".dropdown__search-input\").type(\"1\"); cy.get(\".dropdown__item\").contains(\"1\").click(); cy.contains(\"label\", \"Objekt\").parent().find(\".dropdown__header\").click(); cy.get(\".dropdown__search-input\").type(\"vindue\"); cy.get(\".dropdown__item\").contains(\"W19\").click(); // Stub the alert before clicking save cy.window().then((win) => { cy.stub(win, \"alert\").as(\"windowAlert\"); }); cy.get(\".event-modal__button--save\").click(); // Verify the alert was called with the correct message cy.get(\"@windowAlert\").should(\"have.been.calledWith\", \"Event saved successfully!\"); // Wait for the modal to actually close (indicates the save process is complete) cy.get(\".event-modal\").should(\"not.exist\"); // Give extra time for the database operation to complete cy.wait(1500); }); }); 2 flow describe(\"Delete Event\", () => { beforeEach(() => { cy.visit(\"/\"); }); it(\"find a specific event and delete it\", () => { // Login with valid credentials cy.get('.login-pageinput[type=\"email\"]').type(\"john@doe.com\"); cy.get('.login-pageinput[type=\"password\"]').type(\"123456\"); cy.get('.login-pagebutton[type=\"submit\"]').click(); cy.url().should(\"not.include\", \"/login\"); cy.get(\".home-view\").should(\"be.visible\"); // Navigate to the calendar page cy.get('.sidenavlink[href=\"/calendar\"]').click(); cy.url().should(\"include\", \"/calendar\"); cy.get(\".calendar-view\").should(\"be.visible\"); // Select a date in the calendar cy.get(\".calendargrid\").should(\"be.visible\"); cy.get(\".calendarcell\").contains(\"15\").click(); cy.get(\".event-list\").should(\"be.visible\"); cy.get(\".event-listtitle\").should(\"contain\", \"Events for Thu May 15 2025\"); cy.contains(\".event-itemtitle\", \"Ryd Vinduer\").parent().find(\".event-itemedit-btn\").click(); cy.get(\".event-modal\").should(\"be.visible\"); cy.window().then((win) => { cy.stub(win, \"alert\").as(\"windowAlert\"); }); cy.get(\".event-modalbutton--delete\").click(); // Verify the alert was called with the correct message cy.get(\"@windowAlert\").should(\"have.been.calledWith\", \"Event deleted successfully.\"); // Wait for the modal to actually close (indicates the save process is complete) cy.get(\".event-modal\").should(\"not.exist\"); // Give extra time for the database operation to complete cy.wait(1500); }); });","title":"E2e-testing"},{"location":"e2e-testing/#end-to-end-testing","text":"Der er blevet udf\u00f8rt 2 End-to-end tests p\u00e5 projektet via frameworket cypress. Den f\u00f8rste test skulle teste flowet tilh\u00f8rende oprettelse af et event, og test nummer 2 testede sletning af events","title":"End-to-End Testing"},{"location":"e2e-testing/#1-flow","text":"describe(\"Create Event\", () => { beforeEach(() => { cy.visit(\"/\"); }); it(\"should complete the full create event flow\", () => { // Login with valid credentials cy.get('.login-page__input[type=\"email\"]').type(\"john@doe.com\"); cy.get('.login-page__input[type=\"password\"]').type(\"123456\"); cy.get('.login-page__button[type=\"submit\"]').click(); cy.url().should(\"not.include\", \"/login\"); cy.get(\".home-view\").should(\"be.visible\"); // Navigate to the calendar page cy.get('.sidenav__link[href=\"/calendar\"]').click(); cy.url().should(\"include\", \"/calendar\"); cy.get(\".calendar-view\").should(\"be.visible\"); // Select a date in the calendar cy.get(\".calendar__grid\").should(\"be.visible\"); cy.get(\".calendar__cell\").contains(\"15\").click(); cy.get(\".event-list\").should(\"be.visible\"); cy.get(\".event-list__title\").should(\"contain\", \"Events for Thu May 15 2025\"); // Open the CreateEvent modal via the add button cy.get(\".event-list__add-btn\").click(); cy.get(\".event-modal\").should(\"be.visible\"); // Fill in the CreateEvent form and submit cy.get(\".date-input\").clear().type(\"2025-05-15\"); // Fixed dropdown interactions - target by label and use correct Danish text cy.contains(\"label\", \"Skema\").parent().find(\".dropdown__header\").click(); cy.get(\".dropdown__search-input\").type(\"Ryd\"); cy.get(\".dropdown__item\").contains(\"Ryd\").click(); cy.contains(\"label\", \"Virksomhed\").parent().find(\".dropdown__header\").click(); cy.get(\".dropdown__search-input\").type(\"Boston\"); cy.get(\".dropdown__item\").contains(\"Boston\").click(); cy.contains(\"label\", \"Lokation\").parent().find(\".dropdown__header\").click(); cy.get(\".dropdown__search-input\").type(\"veggie\"); cy.get(\".dropdown__item\").contains(\"Veggie\").click(); cy.contains(\"label\", \"Bruger\").parent().find(\".dropdown__header\").click(); cy.get(\".dropdown__search-input\").type(\"1\"); cy.get(\".dropdown__item\").contains(\"1\").click(); cy.contains(\"label\", \"Objekt\").parent().find(\".dropdown__header\").click(); cy.get(\".dropdown__search-input\").type(\"vindue\"); cy.get(\".dropdown__item\").contains(\"W19\").click(); // Stub the alert before clicking save cy.window().then((win) => { cy.stub(win, \"alert\").as(\"windowAlert\"); }); cy.get(\".event-modal__button--save\").click(); // Verify the alert was called with the correct message cy.get(\"@windowAlert\").should(\"have.been.calledWith\", \"Event saved successfully!\"); // Wait for the modal to actually close (indicates the save process is complete) cy.get(\".event-modal\").should(\"not.exist\"); // Give extra time for the database operation to complete cy.wait(1500); }); });","title":"1 flow"},{"location":"e2e-testing/#2-flow","text":"describe(\"Delete Event\", () => { beforeEach(() => { cy.visit(\"/\"); }); it(\"find a specific event and delete it\", () => { // Login with valid credentials cy.get('.login-pageinput[type=\"email\"]').type(\"john@doe.com\"); cy.get('.login-pageinput[type=\"password\"]').type(\"123456\"); cy.get('.login-pagebutton[type=\"submit\"]').click(); cy.url().should(\"not.include\", \"/login\"); cy.get(\".home-view\").should(\"be.visible\"); // Navigate to the calendar page cy.get('.sidenavlink[href=\"/calendar\"]').click(); cy.url().should(\"include\", \"/calendar\"); cy.get(\".calendar-view\").should(\"be.visible\"); // Select a date in the calendar cy.get(\".calendargrid\").should(\"be.visible\"); cy.get(\".calendarcell\").contains(\"15\").click(); cy.get(\".event-list\").should(\"be.visible\"); cy.get(\".event-listtitle\").should(\"contain\", \"Events for Thu May 15 2025\"); cy.contains(\".event-itemtitle\", \"Ryd Vinduer\").parent().find(\".event-itemedit-btn\").click(); cy.get(\".event-modal\").should(\"be.visible\"); cy.window().then((win) => { cy.stub(win, \"alert\").as(\"windowAlert\"); }); cy.get(\".event-modalbutton--delete\").click(); // Verify the alert was called with the correct message cy.get(\"@windowAlert\").should(\"have.been.calledWith\", \"Event deleted successfully.\"); // Wait for the modal to actually close (indicates the save process is complete) cy.get(\".event-modal\").should(\"not.exist\"); // Give extra time for the database operation to complete cy.wait(1500); }); });","title":"2 flow"},{"location":"git-strategy/","text":"Git Branching Strategy Vi har i gruppen brugt en variant af Gitflow som branching strategi. At det blev en variant skyldes en misforst\u00e5else/sammenblanding af branchingstrategierne, der er redegjort nedenfor hvordan Gitflow er blevet brugt og hvordan det skulle ha v\u00e6ret brugt. Gitflow er blevet brugt med f\u00f8lgende ops\u00e6tning: Main branch : Bliver brugt til version 1.0 Developer branch : Indeholder produktionsklar kode. Al udvikling har forg\u00e5et p\u00e5 developer branchen. Dette har gjort det markant nemmere at f\u00f8lge med i hvad hinanden lavede, men har ogs\u00e5 kr\u00e6vet langt mere kommunikation end hvis rigtig gitflow var blevet benyttet. Hvordan Gitflow skulle ha v\u00e6ret brugt: Main branch : Bliver brugt til version 1.0 Developer branch : Indeholder produktionsklar kode. Feature branches : Bliver brugt til udvikling af features. Hotfix branches : Bliver brugt til akutte fixes. Hvis de to ekstra branches havde v\u00e6ret med under udviklingen af produktet, havde det v\u00e6ret v\u00e6sentligt nemmere at holde overblik over hvad folk manglede og var igang med. Det havde ogs\u00e5 afhjulpet den kommunikation der skulle v\u00e6re omkring hver gang et gruppemedlem pushede.","title":"Git-stragegy"},{"location":"git-strategy/#git-branching-strategy","text":"","title":"Git Branching Strategy"},{"location":"git-strategy/#vi-har-i-gruppen-brugt-en-variant-af-gitflow-som-branching-strategi","text":"At det blev en variant skyldes en misforst\u00e5else/sammenblanding af branchingstrategierne, der er redegjort nedenfor hvordan Gitflow er blevet brugt og hvordan det skulle ha v\u00e6ret brugt.","title":"Vi har i gruppen brugt en variant af Gitflow som branching strategi."},{"location":"git-strategy/#gitflow-er-blevet-brugt-med-flgende-opstning","text":"Main branch : Bliver brugt til version 1.0 Developer branch : Indeholder produktionsklar kode. Al udvikling har forg\u00e5et p\u00e5 developer branchen. Dette har gjort det markant nemmere at f\u00f8lge med i hvad hinanden lavede, men har ogs\u00e5 kr\u00e6vet langt mere kommunikation end hvis rigtig gitflow var blevet benyttet.","title":"Gitflow er blevet brugt med f\u00f8lgende ops\u00e6tning:"},{"location":"git-strategy/#hvordan-gitflow-skulle-ha-vret-brugt","text":"Main branch : Bliver brugt til version 1.0 Developer branch : Indeholder produktionsklar kode. Feature branches : Bliver brugt til udvikling af features. Hotfix branches : Bliver brugt til akutte fixes. Hvis de to ekstra branches havde v\u00e6ret med under udviklingen af produktet, havde det v\u00e6ret v\u00e6sentligt nemmere at holde overblik over hvad folk manglede og var igang med. Det havde ogs\u00e5 afhjulpet den kommunikation der skulle v\u00e6re omkring hver gang et gruppemedlem pushede.","title":"Hvordan Gitflow skulle ha v\u00e6ret brugt:"},{"location":"github-actions/","text":"GitHub Actions Workflow Denne page site er sat op med en f\u00f8lgende github action. name: Deploy MKDocs on: push: branches: - github-pages pull_request: branches: - github-pages jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: fetch-depth: 0 - name: Setup Python uses: actions/setup-python@v4 with: python-version: \"3.x\" - name: Install dependencies run: | python -m pip install --upgrade pip pip install mkdocs-dracula-theme - name: Deploy run: | git config --global user.name \"${GITHUB_ACTOR}\" git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\" mkdocs gh-deploy --force Projektet har v\u00e6ret sat op med f\u00f8lgende github actions til at deploplye sitet n\u00e5r der bliver pushet til mainbranchen name: Deploy to Firebase Hosting on merge on: push: branches: - main jobs: build_and_deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - run: npm ci && npm run build - uses: FirebaseExtended/action-hosting-deploy@v0 with: repoToken: ${{ secrets.GITHUB_TOKEN }} firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_DBI_2025 }} channelId: live projectId: dbi-2025 name: Deploy to Firebase Hosting on PR on: pull_request permissions: checks: write contents: read pull-requests: write jobs: build_and_preview: if: ${{ github.event.pull_request.head.repo.full_name == github.repository }} runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - run: npm ci && npm run build - uses: FirebaseExtended/action-hosting-deploy@v0 with: repoToken: ${{ secrets.GITHUB_TOKEN }} firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_DBI_2025 }} projectId: dbi-2025","title":"GitHub-actions"},{"location":"github-actions/#github-actions-workflow","text":"Denne page site er sat op med en f\u00f8lgende github action. name: Deploy MKDocs on: push: branches: - github-pages pull_request: branches: - github-pages jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: fetch-depth: 0 - name: Setup Python uses: actions/setup-python@v4 with: python-version: \"3.x\" - name: Install dependencies run: | python -m pip install --upgrade pip pip install mkdocs-dracula-theme - name: Deploy run: | git config --global user.name \"${GITHUB_ACTOR}\" git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\" mkdocs gh-deploy --force Projektet har v\u00e6ret sat op med f\u00f8lgende github actions til at deploplye sitet n\u00e5r der bliver pushet til mainbranchen name: Deploy to Firebase Hosting on merge on: push: branches: - main jobs: build_and_deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - run: npm ci && npm run build - uses: FirebaseExtended/action-hosting-deploy@v0 with: repoToken: ${{ secrets.GITHUB_TOKEN }} firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_DBI_2025 }} channelId: live projectId: dbi-2025 name: Deploy to Firebase Hosting on PR on: pull_request permissions: checks: write contents: read pull-requests: write jobs: build_and_preview: if: ${{ github.event.pull_request.head.repo.full_name == github.repository }} runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - run: npm ci && npm run build - uses: FirebaseExtended/action-hosting-deploy@v0 with: repoToken: ${{ secrets.GITHUB_TOKEN }} firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_DBI_2025 }} projectId: dbi-2025","title":"GitHub Actions Workflow"},{"location":"refactoring/","text":"Refactoring Vi har undervejs i processen refaktoreret i koden, for at omskrive eksisterende kode s\u00e5 kvaliteten, strukturen og l\u00e6sbarheden blev forbedret. Eksempler: CalendarHeader.vue havde sin egen scoped styling inde i filen, dette blev sat ind i main.scss filen, s\u00e5 stylingen for dette var samlet. F\u00f8r: <style lang=\"scss\" scoped> @use \"@/assets/main.scss\"; .calendar{ display: flex; &__nav-button { background: none; border: none; font-size: 2rem; cursor: pointer; margin: 0 1rem; } } </style> Efter: .calendar{ display: flex; justify-content: space-between; &__nav-button { background: none; border: none; font-size: 2rem; cursor: pointer; margin: 0 1rem; &--container { display: flex; align-items: center; justify-content: center; } } } Inde i FilterRadio.vue blev der addet et span closing tag, s\u00e5 strukturen var komplet. F\u00f8r: <span class=\"filter__radio\"> <span class=\"filter__radio-dot\" /> </span> <div class=\"filter__content\"> Efter: <span class=\"filter__radio\"> <span class=\"filter__radio-dot\"></span> </span> <div class=\"filter__content\"> I filen DayCell.vue blev en class omskrevet til at passe strukturen BEM, s\u00e5 stylingen der ellers l\u00e5 scoped i samme fil kunne rykkes ind i main.scss filen. Hermed var stylingen for DayCell ogs\u00e5 samlet. F\u00f8r: <div v-if=\"eventCount > 0\" class=\"event-count-badge\"> .event-count-badge { border: 1px solid #446A5A; border-radius: 6px; display: flex; justify-content: center; align-items: flex-start; padding: 0 0.2rem 2rem 0.2rem; } Efter: <div v-if=\"eventCount > 0\" class=\"calendar__cell--event-count\"> &--event-count{ border: 1px solid #446A5A; border-radius: 6px; display: flex; justify-content: center; align-items: flex-start; padding: 0 0.2rem 2rem 0.2rem; }","title":"Refactoring"},{"location":"refactoring/#refactoring","text":"Vi har undervejs i processen refaktoreret i koden, for at omskrive eksisterende kode s\u00e5 kvaliteten, strukturen og l\u00e6sbarheden blev forbedret.","title":"Refactoring"},{"location":"refactoring/#eksempler","text":"CalendarHeader.vue havde sin egen scoped styling inde i filen, dette blev sat ind i main.scss filen, s\u00e5 stylingen for dette var samlet. F\u00f8r: <style lang=\"scss\" scoped> @use \"@/assets/main.scss\"; .calendar{ display: flex; &__nav-button { background: none; border: none; font-size: 2rem; cursor: pointer; margin: 0 1rem; } } </style> Efter: .calendar{ display: flex; justify-content: space-between; &__nav-button { background: none; border: none; font-size: 2rem; cursor: pointer; margin: 0 1rem; &--container { display: flex; align-items: center; justify-content: center; } } } Inde i FilterRadio.vue blev der addet et span closing tag, s\u00e5 strukturen var komplet. F\u00f8r: <span class=\"filter__radio\"> <span class=\"filter__radio-dot\" /> </span> <div class=\"filter__content\"> Efter: <span class=\"filter__radio\"> <span class=\"filter__radio-dot\"></span> </span> <div class=\"filter__content\"> I filen DayCell.vue blev en class omskrevet til at passe strukturen BEM, s\u00e5 stylingen der ellers l\u00e5 scoped i samme fil kunne rykkes ind i main.scss filen. Hermed var stylingen for DayCell ogs\u00e5 samlet. F\u00f8r: <div v-if=\"eventCount > 0\" class=\"event-count-badge\"> .event-count-badge { border: 1px solid #446A5A; border-radius: 6px; display: flex; justify-content: center; align-items: flex-start; padding: 0 0.2rem 2rem 0.2rem; } Efter: <div v-if=\"eventCount > 0\" class=\"calendar__cell--event-count\"> &--event-count{ border: 1px solid #446A5A; border-radius: 6px; display: flex; justify-content: center; align-items: flex-start; padding: 0 0.2rem 2rem 0.2rem; }","title":"Eksempler:"},{"location":"static-code-analysis/","text":"Static Code Analysis Vi brugte ESLint til statisk kodeanalyse. Der blev som udgangspunkt lavet linting inden hvert push. Vores ops\u00e6tning for regler samt ignorerede filer og mapper var som f\u00f8lger: import js from \"@eslint/js\"; import pluginVue from \"eslint-plugin-vue\"; import globals from \"globals\"; import pluginVitest from \"@vitest/eslint-plugin\"; import pluginCypress from \"eslint-plugin-cypress/flat\"; export default [ { name: \"app/files-to-lint\", files: [\"**/*.{js,mjs,jsx,vue}\"], }, { name: \"app/files-to-ignore\", ignores: [ \"**/dist/**\", // Build output \"**/dist-ssr/**\", // Server-side rendered build output \"**/coverage/**\", // Test coverage reports \"**/node_modules/**\", // Dependencies \"**/build/**\", // Build folder \"**/*.min.js\", // Minified JavaScript files \"**/.cache/**\", // Cache files \"**/temp/**\", // Temporary files \"**/.env\", // Environment variables \"**/.env.*\", // Environment variables with extensions \"**/*.log\", // Log files \"**/.vscode/**\", // VSCode settings \"**/.idea/**\", // IntelliJ IDEA settings \"**/cypress/videos/**\", // Cypress videos \"**/cypress/screenshots/**\", // Cypress screenshots \"**/cypress/fixtures/**\", // Cypress fixtures \"**/cypress/support/**\", // Cypress support files \"**/test-output/**\", // Test output \"**/reports/**\", // Reports \"**/*.generated.*\", // Generated files \"**/*.bak\", // Backup files \"**/*.config.*\", // Configuration files ], }, { languageOptions: { globals: { ...globals.browser, }, }, }, js.configs.recommended, ...pluginVue.configs[\"flat/essential\"], { ...pluginVitest.configs.recommended, files: [\"src/**/__tests__/*\"], }, { ...pluginCypress.configs.recommended, files: [\"cypress/e2e/**/*.{cy,spec}.{js,ts,jsx,tsx}\", \"cypress/support/**/*.{js,ts,jsx,tsx}\"], }, { rules: { \"comma-dangle\": [\"error\", \"always-multiline\"], eqeqeq: [\"error\", \"always\"], indent: [\"error\", 2], \"no-eval\": [\"error\"], \"no-trailing-spaces\": [\"error\"], \"no-unused-vars\": [\"error\"], \"no-var\": [\"error\"], \"prefer-const\": [\"error\"], \"no-console\": [\"warn\", { allow: [\"warn\", \"error\"] }], complexity: [\"warn\", { max: 20 }], \"no-param-reassign\": [\"error\"], quotes: [\"error\", \"double\"], semi: [\"error\", \"always\"], \"vue/component-name-in-template-casing\": [\"error\", \"PascalCase\"], \"vue/no-unused-components\": [\"error\"], }, }, ];","title":"Static-code-analysis"},{"location":"static-code-analysis/#static-code-analysis","text":"Vi brugte ESLint til statisk kodeanalyse. Der blev som udgangspunkt lavet linting inden hvert push. Vores ops\u00e6tning for regler samt ignorerede filer og mapper var som f\u00f8lger: import js from \"@eslint/js\"; import pluginVue from \"eslint-plugin-vue\"; import globals from \"globals\"; import pluginVitest from \"@vitest/eslint-plugin\"; import pluginCypress from \"eslint-plugin-cypress/flat\"; export default [ { name: \"app/files-to-lint\", files: [\"**/*.{js,mjs,jsx,vue}\"], }, { name: \"app/files-to-ignore\", ignores: [ \"**/dist/**\", // Build output \"**/dist-ssr/**\", // Server-side rendered build output \"**/coverage/**\", // Test coverage reports \"**/node_modules/**\", // Dependencies \"**/build/**\", // Build folder \"**/*.min.js\", // Minified JavaScript files \"**/.cache/**\", // Cache files \"**/temp/**\", // Temporary files \"**/.env\", // Environment variables \"**/.env.*\", // Environment variables with extensions \"**/*.log\", // Log files \"**/.vscode/**\", // VSCode settings \"**/.idea/**\", // IntelliJ IDEA settings \"**/cypress/videos/**\", // Cypress videos \"**/cypress/screenshots/**\", // Cypress screenshots \"**/cypress/fixtures/**\", // Cypress fixtures \"**/cypress/support/**\", // Cypress support files \"**/test-output/**\", // Test output \"**/reports/**\", // Reports \"**/*.generated.*\", // Generated files \"**/*.bak\", // Backup files \"**/*.config.*\", // Configuration files ], }, { languageOptions: { globals: { ...globals.browser, }, }, }, js.configs.recommended, ...pluginVue.configs[\"flat/essential\"], { ...pluginVitest.configs.recommended, files: [\"src/**/__tests__/*\"], }, { ...pluginCypress.configs.recommended, files: [\"cypress/e2e/**/*.{cy,spec}.{js,ts,jsx,tsx}\", \"cypress/support/**/*.{js,ts,jsx,tsx}\"], }, { rules: { \"comma-dangle\": [\"error\", \"always-multiline\"], eqeqeq: [\"error\", \"always\"], indent: [\"error\", 2], \"no-eval\": [\"error\"], \"no-trailing-spaces\": [\"error\"], \"no-unused-vars\": [\"error\"], \"no-var\": [\"error\"], \"prefer-const\": [\"error\"], \"no-console\": [\"warn\", { allow: [\"warn\", \"error\"] }], complexity: [\"warn\", { max: 20 }], \"no-param-reassign\": [\"error\"], quotes: [\"error\", \"double\"], semi: [\"error\", \"always\"], \"vue/component-name-in-template-casing\": [\"error\", \"PascalCase\"], \"vue/no-unused-components\": [\"error\"], }, }, ];","title":"Static Code Analysis"},{"location":"unit-testing/","text":"Unit Testing Der er blevet udarbejdet 5 unit test med frameworket vitest. Tests De f\u00f8rste 4 test er blevet lavet p\u00e5 funktioner som er trukket ud af deres komponenter, og lagt i mappe der hedder \"functions-for-testing\". Der er blevet lavet mockdata, samt omskrevet props til variabler s\u00e5 funktionerne udelukkende har kunne f\u00e5 testet deres logik. Sidste test er i virkeligheden flere test der k\u00f8rer p\u00e5 en fil, men det gav mening at k\u00f8re test p\u00e5 den, da den rent faktisk var en fil for sig selv i produktion. Alle filer og test filer kan til g\u00e5 p\u00e5 developerbranchen her. filterEvents.js test function script filterEvents export function filteredEvents(events, selectedFilter, selectedValue) { if (!selectedFilter || !selectedValue) return events; return events.filter((event) => { const value = event[selectedFilter]; if (!value || typeof value !== \"string\") return false; return value.toLowerCase().includes(selectedValue.toLowerCase()); }); } test script filterEvents import { describe, it, expect } from \"vitest\"; import { filteredEvents } from \"@/functions-for-testing/filterEvents.js\"; describe(\"filteredEvents\", () => { const events = [ { company: \"Acme\", user: \"Alice\" }, { company: \"Beta\", user: \"Bob\" }, { company: \"Acme\", user: \"Charlie\" }, ]; it(\"returns all events if no filter is set\", () => { expect(filteredEvents(events, \"\", \"\")).toEqual(events); }); it(\"filters by company\", () => { expect(filteredEvents(events, \"company\", \"acme\")).toHaveLength(2); }); it(\"filters by user\", () => { expect(filteredEvents(events, \"user\", \"bob\")).toEqual([{ company: \"Beta\", user: \"Bob\" }]); }); it(\"is case insensitive\", () => { expect(filteredEvents(events, \"user\", \"ALICE\")).toEqual([{ company: \"Acme\", user: \"Alice\" }]); }); it(\"returns empty if no match\", () => { expect(filteredEvents(events, \"company\", \"gamma\")).toEqual([]); }); }); getMonthName.js test function script getMonthName export function getMonthName(year, month) { const date = new Date(year, month); const name = date.toLocaleString(\"default\", { month: \"long\" }); return name.charAt(0).toUpperCase() + name.slice(1); } test script getMonthName import { describe, it, expect } from \"vitest\"; import { getMonthName } from \"@/functions-for-testing/getMonthName.js\"; describe(\"getMonthName\", () => { it(\"returns the correct month name with capital first letter\", () => { expect(getMonthName(2024, 0)).toBe(\"Januar\"); expect(getMonthName(2024, 5)).toBe(\"Juni\"); }); }); fetchOptions.js test function script fetchOptions export async function fetchOptionsFromFirestore(getDoc, doc, db, options, isLoadingOptions, errorMessage) { try { isLoadingOptions.value = true; const collections = [\"schedules\", \"companies\", \"locations\", \"users\", \"objects\"]; const fetchPromises = collections.map((collectionName) => getDoc(doc(db, \"data\", collectionName)).then((snapshot) => { if (snapshot.exists()) { options[collectionName] = Object.values(snapshot.data() || {}); } }), ); await Promise.all(fetchPromises); } catch (error) { errorMessage.value = `Kunne ikke hente data: ${error.message}`; } finally { isLoadingOptions.value = false; } } test script fetchOptions import { fetchOptionsFromFirestore } from \"@/functions-for-testing/fetchOptions.js\"; import { describe, it, expect, vi } from \"vitest\"; describe(\"fetchOptionsFromFirestore\", () => { it(\"fetches and sets options for all collections\", async () => { const mockSnapshot = (data) => ({ exists: () => true, data: () => data, }); const getDoc = vi.fn((docRef) => { const name = docRef.collectionName; return Promise.resolve(mockSnapshot({ a: name + \"1\", b: name + \"2\" })); }); const doc = (db, path, collectionName) => ({ db, path, collectionName, }); const db = {}; const options = { schedules: [], companies: [], locations: [], users: [], objects: [] }; const isLoadingOptions = { value: false }; const errorMessage = { value: \"\" }; await fetchOptionsFromFirestore(getDoc, doc, db, options, isLoadingOptions, errorMessage); expect(options.schedules).toEqual([\"schedules1\", \"schedules2\"]); expect(options.companies).toEqual([\"companies1\", \"companies2\"]); expect(options.locations).toEqual([\"locations1\", \"locations2\"]); expect(options.users).toEqual([\"users1\", \"users2\"]); expect(options.objects).toEqual([\"objects1\", \"objects2\"]); expect(isLoadingOptions.value).toBe(false); expect(errorMessage.value).toBe(\"\"); }); }); saveEvent.js test function script saveEvent export async function saveEvent({ formData, db, addDoc, collection, handleSaveSuccess }) { const eventData = { startDate: formData.startDate, schedule: formData.schedule, company: formData.company, location: formData.location, user: formData.user, object: formData.object, }; handleSaveSuccess(); await addDoc(collection(db, \"events\"), eventData); } test script saveEvent import { describe, it, expect, vi } from \"vitest\"; import { saveEvent } from \"@/functions-for-testing/saveEvent.js\"; describe(\"saveEvent\", () => { it(\"calls addDoc with correct data and calls handleSaveSuccess\", async () => { const addDoc = vi.fn(() => Promise.resolve()); const collection = vi.fn(); const db = {}; const handleSaveSuccess = vi.fn(); const formData = { startDate: \"2024-05-29\", schedule: \"A\", company: \"B\", location: \"C\", user: \"D\", object: \"E\", }; await saveEvent({ formData, db, addDoc, collection, handleSaveSuccess }); expect(addDoc).toHaveBeenCalledWith( collection(db, \"events\"), { startDate: \"2024-05-29\", schedule: \"A\", company: \"B\", location: \"C\", user: \"D\", object: \"E\", }, ); expect(handleSaveSuccess).toHaveBeenCalled(); }); }); useCalendar.js test Denne test er k\u00f8rt p\u00e5 filen useCalendar.js. Hele filen er exporteret som en function der bliver brugt flere steder i kalenderen, og der er derfor mange variabler der skal returne det rigtige data script for test import { describe, it, expect } from \"vitest\"; import { useCalendar } from \"@/composables/useCalendar.js\"; describe(\"useCalendar\", () => { it(\"returns current year and month\", () => { const { currentYear, currentMonth } = useCalendar(); const now = new Date(); expect(currentYear.value).toBe(now.getFullYear()); expect(currentMonth.value).toBe(now.getMonth()); }); it(\"nextMonth increments the month\", () => { const { currentMonth, nextMonth } = useCalendar(); currentMonth.value = 5; nextMonth(); expect(currentMonth.value).toBe(6); }); it(\"prevMonth decrements the month\", () => { const { currentMonth, prevMonth } = useCalendar(); currentMonth.value = 5; prevMonth(); expect(currentMonth.value).toBe(4); }); it(\"nextMonth wraps from December to January and increments year\", () => { const { currentMonth, currentYear, nextMonth } = useCalendar(); currentMonth.value = 11; currentYear.value = 2024; nextMonth(); expect(currentMonth.value).toBe(0); expect(currentYear.value).toBe(2025); }); it(\"prevMonth wraps from January to December and decrements year\", () => { const { currentMonth, currentYear, prevMonth } = useCalendar(); currentMonth.value = 0; currentYear.value = 2024; prevMonth(); expect(currentMonth.value).toBe(11); expect(currentYear.value).toBe(2023); }); it(\"daysInMonth returns 42 days\", () => { const { daysInMonth } = useCalendar(); expect(daysInMonth.value.length).toBe(42); }); });","title":"Unit-testing"},{"location":"unit-testing/#unit-testing","text":"","title":"Unit Testing"},{"location":"unit-testing/#der-er-blevet-udarbejdet-5-unit-test-med-frameworket-vitest","text":"","title":"Der er blevet udarbejdet 5 unit test med frameworket vitest."},{"location":"unit-testing/#tests","text":"De f\u00f8rste 4 test er blevet lavet p\u00e5 funktioner som er trukket ud af deres komponenter, og lagt i mappe der hedder \"functions-for-testing\". Der er blevet lavet mockdata, samt omskrevet props til variabler s\u00e5 funktionerne udelukkende har kunne f\u00e5 testet deres logik. Sidste test er i virkeligheden flere test der k\u00f8rer p\u00e5 en fil, men det gav mening at k\u00f8re test p\u00e5 den, da den rent faktisk var en fil for sig selv i produktion. Alle filer og test filer kan til g\u00e5 p\u00e5 developerbranchen her.","title":"Tests"},{"location":"unit-testing/#filtereventsjs-test","text":"","title":"filterEvents.js test"},{"location":"unit-testing/#function-script-filterevents","text":"export function filteredEvents(events, selectedFilter, selectedValue) { if (!selectedFilter || !selectedValue) return events; return events.filter((event) => { const value = event[selectedFilter]; if (!value || typeof value !== \"string\") return false; return value.toLowerCase().includes(selectedValue.toLowerCase()); }); }","title":"function script filterEvents"},{"location":"unit-testing/#test-script-filterevents","text":"import { describe, it, expect } from \"vitest\"; import { filteredEvents } from \"@/functions-for-testing/filterEvents.js\"; describe(\"filteredEvents\", () => { const events = [ { company: \"Acme\", user: \"Alice\" }, { company: \"Beta\", user: \"Bob\" }, { company: \"Acme\", user: \"Charlie\" }, ]; it(\"returns all events if no filter is set\", () => { expect(filteredEvents(events, \"\", \"\")).toEqual(events); }); it(\"filters by company\", () => { expect(filteredEvents(events, \"company\", \"acme\")).toHaveLength(2); }); it(\"filters by user\", () => { expect(filteredEvents(events, \"user\", \"bob\")).toEqual([{ company: \"Beta\", user: \"Bob\" }]); }); it(\"is case insensitive\", () => { expect(filteredEvents(events, \"user\", \"ALICE\")).toEqual([{ company: \"Acme\", user: \"Alice\" }]); }); it(\"returns empty if no match\", () => { expect(filteredEvents(events, \"company\", \"gamma\")).toEqual([]); }); });","title":"test script filterEvents"},{"location":"unit-testing/#getmonthnamejs-test","text":"","title":"getMonthName.js test"},{"location":"unit-testing/#function-script-getmonthname","text":"export function getMonthName(year, month) { const date = new Date(year, month); const name = date.toLocaleString(\"default\", { month: \"long\" }); return name.charAt(0).toUpperCase() + name.slice(1); }","title":"function script getMonthName"},{"location":"unit-testing/#test-script-getmonthname","text":"import { describe, it, expect } from \"vitest\"; import { getMonthName } from \"@/functions-for-testing/getMonthName.js\"; describe(\"getMonthName\", () => { it(\"returns the correct month name with capital first letter\", () => { expect(getMonthName(2024, 0)).toBe(\"Januar\"); expect(getMonthName(2024, 5)).toBe(\"Juni\"); }); });","title":"test script getMonthName"},{"location":"unit-testing/#fetchoptionsjs-test","text":"","title":"fetchOptions.js test"},{"location":"unit-testing/#function-script-fetchoptions","text":"export async function fetchOptionsFromFirestore(getDoc, doc, db, options, isLoadingOptions, errorMessage) { try { isLoadingOptions.value = true; const collections = [\"schedules\", \"companies\", \"locations\", \"users\", \"objects\"]; const fetchPromises = collections.map((collectionName) => getDoc(doc(db, \"data\", collectionName)).then((snapshot) => { if (snapshot.exists()) { options[collectionName] = Object.values(snapshot.data() || {}); } }), ); await Promise.all(fetchPromises); } catch (error) { errorMessage.value = `Kunne ikke hente data: ${error.message}`; } finally { isLoadingOptions.value = false; } }","title":"function script fetchOptions"},{"location":"unit-testing/#test-script-fetchoptions","text":"import { fetchOptionsFromFirestore } from \"@/functions-for-testing/fetchOptions.js\"; import { describe, it, expect, vi } from \"vitest\"; describe(\"fetchOptionsFromFirestore\", () => { it(\"fetches and sets options for all collections\", async () => { const mockSnapshot = (data) => ({ exists: () => true, data: () => data, }); const getDoc = vi.fn((docRef) => { const name = docRef.collectionName; return Promise.resolve(mockSnapshot({ a: name + \"1\", b: name + \"2\" })); }); const doc = (db, path, collectionName) => ({ db, path, collectionName, }); const db = {}; const options = { schedules: [], companies: [], locations: [], users: [], objects: [] }; const isLoadingOptions = { value: false }; const errorMessage = { value: \"\" }; await fetchOptionsFromFirestore(getDoc, doc, db, options, isLoadingOptions, errorMessage); expect(options.schedules).toEqual([\"schedules1\", \"schedules2\"]); expect(options.companies).toEqual([\"companies1\", \"companies2\"]); expect(options.locations).toEqual([\"locations1\", \"locations2\"]); expect(options.users).toEqual([\"users1\", \"users2\"]); expect(options.objects).toEqual([\"objects1\", \"objects2\"]); expect(isLoadingOptions.value).toBe(false); expect(errorMessage.value).toBe(\"\"); }); });","title":"test script fetchOptions"},{"location":"unit-testing/#saveeventjs-test","text":"","title":"saveEvent.js test"},{"location":"unit-testing/#function-script-saveevent","text":"export async function saveEvent({ formData, db, addDoc, collection, handleSaveSuccess }) { const eventData = { startDate: formData.startDate, schedule: formData.schedule, company: formData.company, location: formData.location, user: formData.user, object: formData.object, }; handleSaveSuccess(); await addDoc(collection(db, \"events\"), eventData); }","title":"function script saveEvent"},{"location":"unit-testing/#test-script-saveevent","text":"import { describe, it, expect, vi } from \"vitest\"; import { saveEvent } from \"@/functions-for-testing/saveEvent.js\"; describe(\"saveEvent\", () => { it(\"calls addDoc with correct data and calls handleSaveSuccess\", async () => { const addDoc = vi.fn(() => Promise.resolve()); const collection = vi.fn(); const db = {}; const handleSaveSuccess = vi.fn(); const formData = { startDate: \"2024-05-29\", schedule: \"A\", company: \"B\", location: \"C\", user: \"D\", object: \"E\", }; await saveEvent({ formData, db, addDoc, collection, handleSaveSuccess }); expect(addDoc).toHaveBeenCalledWith( collection(db, \"events\"), { startDate: \"2024-05-29\", schedule: \"A\", company: \"B\", location: \"C\", user: \"D\", object: \"E\", }, ); expect(handleSaveSuccess).toHaveBeenCalled(); }); });","title":"test script saveEvent"},{"location":"unit-testing/#usecalendarjs-test","text":"Denne test er k\u00f8rt p\u00e5 filen useCalendar.js. Hele filen er exporteret som en function der bliver brugt flere steder i kalenderen, og der er derfor mange variabler der skal returne det rigtige data","title":"useCalendar.js test"},{"location":"unit-testing/#script-for-test","text":"import { describe, it, expect } from \"vitest\"; import { useCalendar } from \"@/composables/useCalendar.js\"; describe(\"useCalendar\", () => { it(\"returns current year and month\", () => { const { currentYear, currentMonth } = useCalendar(); const now = new Date(); expect(currentYear.value).toBe(now.getFullYear()); expect(currentMonth.value).toBe(now.getMonth()); }); it(\"nextMonth increments the month\", () => { const { currentMonth, nextMonth } = useCalendar(); currentMonth.value = 5; nextMonth(); expect(currentMonth.value).toBe(6); }); it(\"prevMonth decrements the month\", () => { const { currentMonth, prevMonth } = useCalendar(); currentMonth.value = 5; prevMonth(); expect(currentMonth.value).toBe(4); }); it(\"nextMonth wraps from December to January and increments year\", () => { const { currentMonth, currentYear, nextMonth } = useCalendar(); currentMonth.value = 11; currentYear.value = 2024; nextMonth(); expect(currentMonth.value).toBe(0); expect(currentYear.value).toBe(2025); }); it(\"prevMonth wraps from January to December and decrements year\", () => { const { currentMonth, currentYear, prevMonth } = useCalendar(); currentMonth.value = 0; currentYear.value = 2024; prevMonth(); expect(currentMonth.value).toBe(11); expect(currentYear.value).toBe(2023); }); it(\"daysInMonth returns 42 days\", () => { const { daysInMonth } = useCalendar(); expect(daysInMonth.value.length).toBe(42); }); });","title":"script for test"}]}