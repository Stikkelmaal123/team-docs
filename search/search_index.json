{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Team Documentation This site contains guidelines, processes, and resources for our team. Quick Links Team Guidelines About Our Team Git Branching Strategy Static Code Analysis Unit Testing End-to-End Testing GitHub Actions Workflow","title":"Home"},{"location":"#welcome-to-team-documentation","text":"This site contains guidelines, processes, and resources for our team.","title":"Welcome to Team Documentation"},{"location":"#quick-links","text":"Team Guidelines About Our Team Git Branching Strategy Static Code Analysis Unit Testing End-to-End Testing GitHub Actions Workflow","title":"Quick Links"},{"location":"e2e-testing/","text":"End-to-End Testing We implemented E2E tests using [Framework Name]. The following flows were tested: [Flow 1] [Flow 2] Details of the test implementation are provided here.","title":"E2e-testing"},{"location":"e2e-testing/#end-to-end-testing","text":"We implemented E2E tests using [Framework Name]. The following flows were tested: [Flow 1] [Flow 2] Details of the test implementation are provided here.","title":"End-to-End Testing"},{"location":"git-strategy/","text":"Git Branching Strategy Vi har i gruppen brugt en variant af Gitflow som branching strategi. At det blev en variant skyldes en misforst\u00e5else/sammenblanding af branchingstrategierne, der er redegjort nedenfor hvordan Gitflow er blevet brugt og hvordan det skulle ha v\u00e6ret brugt. Gitflow er blevet brugt med f\u00f8lgende ops\u00e6tning: Main branch : Bliver brugt til version 1.0 Developer branch : Indeholder produktionsklar kode. Al udvikling har forg\u00e5et p\u00e5 developer branchen. Dette har gjort det markant nemmere at f\u00f8lge med i hvad hinanden lavede, men har ogs\u00e5 kr\u00e6vet langt mere kommunikation end hvis rigtig gitflow var blevet benyttet. Hvordan Gitflow skulle ha v\u00e6ret brugt: Main branch : Bliver brugt til version 1.0 Developer branch : Indeholder produktionsklar kode. Feature branches : Bliver brugt til udvikling af features. Hotfix branches : Bliver brugt til akutte fixes. Hvis de to ekstra branches havde v\u00e6ret med under udviklingen af produktet, havde det v\u00e6ret v\u00e6sentligt nemmere at holde overblik over hvad folk manglede og var igang med. Det havde ogs\u00e5 afhjulpet den kommunikation der skulle v\u00e6re omkring hver gang et gruppemedlem pushede.","title":"Git-stragegy"},{"location":"git-strategy/#git-branching-strategy","text":"","title":"Git Branching Strategy"},{"location":"git-strategy/#vi-har-i-gruppen-brugt-en-variant-af-gitflow-som-branching-strategi","text":"At det blev en variant skyldes en misforst\u00e5else/sammenblanding af branchingstrategierne, der er redegjort nedenfor hvordan Gitflow er blevet brugt og hvordan det skulle ha v\u00e6ret brugt.","title":"Vi har i gruppen brugt en variant af Gitflow som branching strategi."},{"location":"git-strategy/#gitflow-er-blevet-brugt-med-flgende-opstning","text":"Main branch : Bliver brugt til version 1.0 Developer branch : Indeholder produktionsklar kode. Al udvikling har forg\u00e5et p\u00e5 developer branchen. Dette har gjort det markant nemmere at f\u00f8lge med i hvad hinanden lavede, men har ogs\u00e5 kr\u00e6vet langt mere kommunikation end hvis rigtig gitflow var blevet benyttet.","title":"Gitflow er blevet brugt med f\u00f8lgende ops\u00e6tning:"},{"location":"git-strategy/#hvordan-gitflow-skulle-ha-vret-brugt","text":"Main branch : Bliver brugt til version 1.0 Developer branch : Indeholder produktionsklar kode. Feature branches : Bliver brugt til udvikling af features. Hotfix branches : Bliver brugt til akutte fixes. Hvis de to ekstra branches havde v\u00e6ret med under udviklingen af produktet, havde det v\u00e6ret v\u00e6sentligt nemmere at holde overblik over hvad folk manglede og var igang med. Det havde ogs\u00e5 afhjulpet den kommunikation der skulle v\u00e6re omkring hver gang et gruppemedlem pushede.","title":"Hvordan Gitflow skulle ha v\u00e6ret brugt:"},{"location":"github-actions/","text":"GitHub Actions Workflow Our GitHub Actions workflow automates the following tasks: Running unit tests Running E2E tests Deploying to GitHub Pages The workflow file is located in .github/workflows/ci.yml .","title":"GitHub-actions"},{"location":"github-actions/#github-actions-workflow","text":"Our GitHub Actions workflow automates the following tasks: Running unit tests Running E2E tests Deploying to GitHub Pages The workflow file is located in .github/workflows/ci.yml .","title":"GitHub Actions Workflow"},{"location":"refactoring/","text":"Refactoring We have been refactoring like crazy!! Examples : Example test cases: 1. [Test Case 1] 2. [Test Case 2]","title":"Refactoring"},{"location":"refactoring/#refactoring","text":"We have been refactoring like crazy!! Examples : Example test cases: 1. [Test Case 1] 2. [Test Case 2]","title":"Refactoring"},{"location":"static-code-analysis/","text":"Static Code Analysis Vi brugte ESLint til statisk kodeanalyse. Der blev som udgangspunkt lavet linting inden hvert push. Vores ops\u00e6tning for regler samt ignorerede filer og mapper var som f\u00f8lger: import js from \"@eslint/js\"; import pluginVue from \"eslint-plugin-vue\"; import globals from \"globals\"; import pluginVitest from \"@vitest/eslint-plugin\"; import pluginCypress from \"eslint-plugin-cypress/flat\"; export default [ { name: \"app/files-to-lint\", files: [\"**/*.{js,mjs,jsx,vue}\"], }, { name: \"app/files-to-ignore\", ignores: [ \"**/dist/**\", // Build output \"**/dist-ssr/**\", // Server-side rendered build output \"**/coverage/**\", // Test coverage reports \"**/node_modules/**\", // Dependencies \"**/build/**\", // Build folder \"**/*.min.js\", // Minified JavaScript files \"**/.cache/**\", // Cache files \"**/temp/**\", // Temporary files \"**/.env\", // Environment variables \"**/.env.*\", // Environment variables with extensions \"**/*.log\", // Log files \"**/.vscode/**\", // VSCode settings \"**/.idea/**\", // IntelliJ IDEA settings \"**/cypress/videos/**\", // Cypress videos \"**/cypress/screenshots/**\", // Cypress screenshots \"**/cypress/fixtures/**\", // Cypress fixtures \"**/cypress/support/**\", // Cypress support files \"**/test-output/**\", // Test output \"**/reports/**\", // Reports \"**/*.generated.*\", // Generated files \"**/*.bak\", // Backup files \"**/*.config.*\", // Configuration files ], }, { languageOptions: { globals: { ...globals.browser, }, }, }, js.configs.recommended, ...pluginVue.configs[\"flat/essential\"], { ...pluginVitest.configs.recommended, files: [\"src/**/__tests__/*\"], }, { ...pluginCypress.configs.recommended, files: [\"cypress/e2e/**/*.{cy,spec}.{js,ts,jsx,tsx}\", \"cypress/support/**/*.{js,ts,jsx,tsx}\"], }, { rules: { \"comma-dangle\": [\"error\", \"always-multiline\"], eqeqeq: [\"error\", \"always\"], indent: [\"error\", 2], \"no-eval\": [\"error\"], \"no-trailing-spaces\": [\"error\"], \"no-unused-vars\": [\"error\"], \"no-var\": [\"error\"], \"prefer-const\": [\"error\"], \"no-console\": [\"warn\", { allow: [\"warn\", \"error\"] }], complexity: [\"warn\", { max: 20 }], \"no-param-reassign\": [\"error\"], quotes: [\"error\", \"double\"], semi: [\"error\", \"always\"], \"vue/component-name-in-template-casing\": [\"error\", \"PascalCase\"], \"vue/no-unused-components\": [\"error\"], }, }, ];","title":"Static-code-analysis"},{"location":"static-code-analysis/#static-code-analysis","text":"Vi brugte ESLint til statisk kodeanalyse. Der blev som udgangspunkt lavet linting inden hvert push. Vores ops\u00e6tning for regler samt ignorerede filer og mapper var som f\u00f8lger: import js from \"@eslint/js\"; import pluginVue from \"eslint-plugin-vue\"; import globals from \"globals\"; import pluginVitest from \"@vitest/eslint-plugin\"; import pluginCypress from \"eslint-plugin-cypress/flat\"; export default [ { name: \"app/files-to-lint\", files: [\"**/*.{js,mjs,jsx,vue}\"], }, { name: \"app/files-to-ignore\", ignores: [ \"**/dist/**\", // Build output \"**/dist-ssr/**\", // Server-side rendered build output \"**/coverage/**\", // Test coverage reports \"**/node_modules/**\", // Dependencies \"**/build/**\", // Build folder \"**/*.min.js\", // Minified JavaScript files \"**/.cache/**\", // Cache files \"**/temp/**\", // Temporary files \"**/.env\", // Environment variables \"**/.env.*\", // Environment variables with extensions \"**/*.log\", // Log files \"**/.vscode/**\", // VSCode settings \"**/.idea/**\", // IntelliJ IDEA settings \"**/cypress/videos/**\", // Cypress videos \"**/cypress/screenshots/**\", // Cypress screenshots \"**/cypress/fixtures/**\", // Cypress fixtures \"**/cypress/support/**\", // Cypress support files \"**/test-output/**\", // Test output \"**/reports/**\", // Reports \"**/*.generated.*\", // Generated files \"**/*.bak\", // Backup files \"**/*.config.*\", // Configuration files ], }, { languageOptions: { globals: { ...globals.browser, }, }, }, js.configs.recommended, ...pluginVue.configs[\"flat/essential\"], { ...pluginVitest.configs.recommended, files: [\"src/**/__tests__/*\"], }, { ...pluginCypress.configs.recommended, files: [\"cypress/e2e/**/*.{cy,spec}.{js,ts,jsx,tsx}\", \"cypress/support/**/*.{js,ts,jsx,tsx}\"], }, { rules: { \"comma-dangle\": [\"error\", \"always-multiline\"], eqeqeq: [\"error\", \"always\"], indent: [\"error\", 2], \"no-eval\": [\"error\"], \"no-trailing-spaces\": [\"error\"], \"no-unused-vars\": [\"error\"], \"no-var\": [\"error\"], \"prefer-const\": [\"error\"], \"no-console\": [\"warn\", { allow: [\"warn\", \"error\"] }], complexity: [\"warn\", { max: 20 }], \"no-param-reassign\": [\"error\"], quotes: [\"error\", \"double\"], semi: [\"error\", \"always\"], \"vue/component-name-in-template-casing\": [\"error\", \"PascalCase\"], \"vue/no-unused-components\": [\"error\"], }, }, ];","title":"Static Code Analysis"},{"location":"unit-testing/","text":"Unit Testing We implemented unit tests using [Framework Name]. Below are the details: Number of tests : 5 Coverage : [Coverage Percentage] Example test cases: 1. [Test Case 1] 2. [Test Case 2]","title":"Unit-testing"},{"location":"unit-testing/#unit-testing","text":"We implemented unit tests using [Framework Name]. Below are the details: Number of tests : 5 Coverage : [Coverage Percentage] Example test cases: 1. [Test Case 1] 2. [Test Case 2]","title":"Unit Testing"}]}